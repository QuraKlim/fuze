import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
/* import { RootState, AppThunk } from "../../app/store"; */
import { fetchJokes } from "./chuckApi";

interface IJoke {
  icon_url: string;
  id: string;
  url: string;
  value: string;
  updated_at: string;
  created_at: string;
}

export interface CounterState {
  jokes: IJoke[] | null;
  status: "idle" | "loading" | "failed";
}

const initialState: CounterState = {
  jokes: null,
  status: "idle",
};

export const fetchJokesByValue = createAsyncThunk(
  "chuck/fetchJokes",
  async (searchValue: string) => {
    const response = await fetchJokes(searchValue);
    console.log(response.data);
    return response.data;
  }
);

export const chuckSlice = createSlice({
  name: "chuck",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchJokesByValue.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchJokesByValue.fulfilled, (state, action) => {
        state.status = "idle";
        state.jokes = action.payload.result;
      })
      .addCase(fetchJokesByValue.rejected, (state) => {
        state.status = "failed";
      });
  },
});

/* export const { increment, decrement, incrementByAmount } = counterSlice.actions; */

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
/* export const selectCount = (state: RootState) => state.counter.value; */

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  }; */

export default chuckSlice.reducer;
